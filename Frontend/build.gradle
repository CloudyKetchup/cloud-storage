buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: 'base'
apply plugin: 'com.moowork.node' // gradle-node-plugin

node {
    // Version of node to use.
    version = '12.4.0'

    // Version of npm to use.
    npmVersion = '6.9.0'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
}

npm_run_build {
    // make sure the build task is executed only when appropriate files change
    inputs.files fileTree('public')
    inputs.files fileTree('src')

    // 'node_modules' appeared not reliable for dependency change detection (the task was rerun without changes)
    // though 'package.json' and 'package-lock.json' should be enough anyway
    inputs.file 'package.json'
    inputs.file 'package-lock.json'

    outputs.dir 'build'
}

// pack output of the build into JAR file
task packageFrontend(type: Zip) {
    dependsOn npm_run_build
    baseName 'frontend'
    extension 'jar'
    destinationDir file("${projectDir}/build_packageFrontend")
    from('build') {
        // optional path under which output will be visible in Java classpath, e.g. static resources path
        into 'static'
    }
}


// declare a dedicated scope for publishing the packaged JAR
configurations {
    npmResources
}

configurations.default.extendsFrom(configurations.npmResources)

// expose the artifact created by the packaging task
artifacts {
    npmResources(packageFrontend.archivePath) {
        builtBy packageFrontend
        type 'jar'
    }
}

assemble.dependsOn packageFrontend